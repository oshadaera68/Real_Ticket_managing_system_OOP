package com.eraboy.OOP_Backend.service;

import com.eraboy.OOP_Backend.config.Configuration;
import com.eraboy.OOP_Backend.entity.Ticket;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import java.util.LinkedList;
import java.util.Queue;

/**
 * Coded By: Era Boy
 * Version: v0.1.0
 **/

@Service
@Lazy
public class TicketPoolService {
    private final int poolSize;
    private final Queue<Ticket> ticketPool = new LinkedList<>();

    private Ticket ticket;
    private final Configuration config;

    public TicketPoolService(Ticket ticket, Configuration config) {
        this.ticket = ticket;
        this.config = config;
        this.poolSize = config.getPoolSize();
    }

    public void setPoolSize() {
        int poolSize = config.getPoolSize();
    }

    public synchronized void addTickets(Ticket newTicket) {
        try {
            System.out.println(this.poolSize);
            while (ticketPool.size() >= poolSize) {
                try {
                    wait();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
            this.ticketPool.add(newTicket);
            notifyAll();
            System.out.println(newTicket + " added by " + Thread.currentThread().getName());
            System.out.println("Remaining tickets in pool - " + ticketPool.size());
        } catch (Exception e) {
            System.out.println("Exception " + e + " at TicketPool addTicket()");
        }
    }

    public synchronized Ticket buyTicket() {
        try {
            while (ticketPool.isEmpty()) {
                try {
                    wait();
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
//            System.out.println("At pool buyTicket");
            ticket = ticketPool.poll();
            notifyAll();
            System.out.println(ticket + " bought by " + Thread.currentThread().getName());
            System.out.println("Remaining tickets in pool - " + ticketPool.size());
            return ticket;
        } catch (Exception e) {
            System.out.println("Exception " + e + " at TicketPool buyTicket()");
        }
        return null;
    }
}
